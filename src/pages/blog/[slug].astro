---
import type { DatabaseObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import NotionRenderer from "../../components/notion/blocks/NotionRenderer.astro";
import BlogPageFooter from "../../components/notion/blog/BlogPageFooter.astro";
import NotionPageLayout from "../../layouts/NotionPageLayout.astro";
import { getFilteredBlogItems } from "../../lib/notion/blog";
import { generateOgImage } from "../../lib/og-images";
import { getOgImageOptionsForNotionPage } from "../../lib/og-images/notion";
import {
  getBlockChildren,
  getInfoForPage,
  getPage,
  getPageIdFromSlug,
} from "../../lib/notion/caches";
import { getComponentOverrides } from "../../lib/notion/overrides";
import { getPageTitleComponents } from "../../lib/notion/titles";
import {
  getPagePropertyByName,
  richTextToUnformattedString,
} from "../../lib/notion/util";

export async function getStaticPaths() {
  const results = await getFilteredBlogItems({
    allowUnpublished: import.meta.env.DEV,
    allowUnlisted: true,
  });

  const paths = await Promise.all(
    results.map(async (result) => {
      const info = await getInfoForPage(result.id);

      return {
        params: { slug: info.slug },
      };
    }),
  );

  return paths;
}

const { slug } = Astro.params;

const id = await getPageIdFromSlug(slug!);

const [page, blocks] = await Promise.all([getPage(id), getBlockChildren(id)]);
const overrides = await getComponentOverrides(id);

const info = await getInfoForPage(page.id);
const titleComponents = getPageTitleComponents(page);
const pageTitle = richTextToUnformattedString(titleComponents);

const publishedProperty = getPagePropertyByName(page, "Published", "date");
const editedProperty = getPagePropertyByName(page, "Edited", "date");

const ogImageOptions = await getOgImageOptionsForNotionPage(page);
ogImageOptions.layout = "blog";
const ogImage = await generateOgImage(ogImageOptions);
---

<NotionPageLayout
  page={page}
  meta={{
    title: pageTitle,
    url: info.path,
    rssUrl: "/blog/feed.xml",
    authors: [{ firstName: "Stuart", lastName: "Thomson" }],
    article: { type: "blog" },
    publishedDate: publishedProperty?.date?.start,
    modifiedDate: editedProperty?.date?.start,
    images: [
      {
        url: new URL(ogImage.path, Astro.site).toString(),
        width: ogImage.width,
        height: ogImage.height,
        mimeType: ogImage.mimeType,
      },
    ],
  }}
  breadcrumbs={[
    { name: "Home", url: "/" },
    { name: "Blog", url: "/blog" },
    { name: pageTitle, url: info.path },
  ]}
  showCoverSource
  showReadingTime
  showPublishEditDates
>
  <NotionRenderer blocks={blocks} overrides={overrides} />

  <BlogPageFooter
    page={page as unknown as DatabaseObjectResponse}
    slot="page-footer"
  />
</NotionPageLayout>
