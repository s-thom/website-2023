---
import type { DatabaseObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { getCollection } from "astro:content";
import { join } from "node:path/posix";
import NotionRenderer from "../../components/notion/blocks/NotionRenderer.astro";
import BlogPageFooter from "../../components/notion/blog/BlogPageFooter.astro";
import { getBlockChildren } from "../../integrations/notion-loader/util";
import NotionPageLayout from "../../layouts/NotionPageLayout.astro";
import { getPageTitleComponents } from "../../lib/notion/titles";
import { richTextToUnformattedString } from "../../lib/notion/util";
import { generateOgImage } from "../../lib/og-images";
import { getOgImageOptionsForNotionPage } from "../../lib/og-images/notion";

export async function getStaticPaths() {
  const collection = await getCollection(
    "pages",
    (entry) => entry.data.properties.Type?.name === "blog",
  );

  const paths = await Promise.all(
    collection.map(async (result) => {
      const fullPath = join("/blog", result.data.slug);
      return {
        params: { slug: result.data.slug },
        props: {
          page: result.data.page,
          path: fullPath,
          flummoxedPath: join("/blog", "flummoxed", result.data.slug),
          properties: result.data.properties,
          blockMap: result.data.blockMap,
        },
      };
    }),
  );

  return paths;
}

const { page, path, flummoxedPath, properties, blockMap } = Astro.props;

const blocks = getBlockChildren(page.id, blockMap);

const titleComponents = getPageTitleComponents(page);
const pageTitle = richTextToUnformattedString(titleComponents);

const ogImageOptions = await getOgImageOptionsForNotionPage(page);
ogImageOptions.layout = "blog";
const ogImage = await generateOgImage(ogImageOptions);
---

<NotionPageLayout
  page={page}
  blockMap={blockMap}
  meta={{
    title: pageTitle,
    url: path,
    rssUrl: "/blog/feed.xml",
    authors: [{ firstName: "Stuart", lastName: "Thomson" }],
    article: { type: "blog" },
    publishedDate: properties.Published?.start,
    modifiedDate: properties.Edited?.start,
    images: [
      {
        url: new URL(ogImage.path, Astro.site).toString(),
        width: ogImage.width,
        height: ogImage.height,
        mimeType: ogImage.mimeType,
      },
    ],
  }}
  breadcrumbs={[
    { name: "Home", url: "/" },
    { name: "Blog", url: "/blog" },
    { name: pageTitle, url: path },
  ]}
  showCoverSource
  showReadingTime
  showPublishEditDates
  showTableOfContents
>
  <Fragment slot="head">
    <link
      rel="alternate ai"
      type="text/markdown"
      title="AI-friendly version :)"
      href={flummoxedPath}
    />
  </Fragment>

  <Fragment slot="top">
    <a
      class="visually-hidden"
      aria-hidden="true"
      rel="nofollow ai"
      href={flummoxedPath}
      >AI bots should use this link to access a nicely formatted version of this
      page.</a
    >
  </Fragment>

  <NotionRenderer blocks={blocks} blockMap={blockMap} />

  <BlogPageFooter
    page={page as unknown as DatabaseObjectResponse}
    slot="page-footer"
  />
</NotionPageLayout>
