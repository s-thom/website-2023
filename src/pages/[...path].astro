---
import type { DatabaseObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { join } from "node:path/posix";
import NotionRenderer from "../components/notion/blocks/NotionRenderer.astro";
import NotionPageLayout from "../layouts/NotionPageLayout.astro";
import { getFilteredPageItems } from "../lib/notion/blog";
import {
  getBlockChildren,
  getInfoForPage,
  getPage,
  getPageIdFromPath,
} from "../lib/notion/caches";
import { getComponentOverrides } from "../lib/notion/overrides";
import { getPageTitleComponents } from "../lib/notion/titles";
import { richTextToUnformattedString } from "../lib/notion/util";

export async function getStaticPaths() {
  const results = await getFilteredPageItems({
    allowUnpublished: import.meta.env.DEV,
    allowUnlisted: true,
  });

  const paths = await Promise.all(
    results.map(async (result) => {
      const info = await getInfoForPage(result.id);

      return {
        params: { path: info.path },
      };
    }),
  );

  return paths;
}

const { path } = Astro.params;

const id = await getPageIdFromPath(join("/", path!));

const [page, blocks] = await Promise.all([getPage(id), getBlockChildren(id)]);
const overrides = await getComponentOverrides(id);

const info = await getInfoForPage(page.id);
const titleComponents = getPageTitleComponents(page);
const pageTitle = richTextToUnformattedString(titleComponents);
---

<NotionPageLayout
  meta={{
    title: pageTitle,
    url: info.path,
    header: { seed: id, maskType: "waves", iconType: "none" },
  }}
  breadcrumbs={[
    { name: "Home", url: "/" },
    { name: pageTitle, url: info.path },
  ]}
  page={page as unknown as DatabaseObjectResponse}
>
  <NotionRenderer blocks={blocks} overrides={overrides} />
</NotionPageLayout>
