---
import type {
  DatabaseObjectResponse,
  PageObjectResponse,
} from "@notionhq/client/build/src/api-endpoints";
import DevOnly from "../components/DevOnly.astro";
import type { PageMetaType } from "../components/PageMeta.astro";
import type { LinkInfo } from "../components/SiteHeader.astro";
import SkipLinks, {
  type Props as SkipLinksProps,
} from "../components/SkipLinks.astro";
import NotionPageHeader from "../components/notion/NotionPageHeader.astro";
import NotionBackdrop from "../components/notion/common/NotionBackdrop.astro";
import NotionTableOfContents from "../components/notion/common/NotionTableOfContents.astro";
import { LazyLoader } from "../components/react/LazyLoader.tsx";
import type { StickerTypes } from "../components/react/StickerBook/types";
import { getPagePropertyByName } from "../lib/notion/util";
import type { StickerTypes } from "../stickers/types";
import PageWithHeaderLayout from "./PageWithHeaderLayout.astro";
import type { BlockInfo } from "../integrations/notion-loader/api";

export interface Props {
  page: DatabaseObjectResponse | PageObjectResponse;
  blockMap: Record<string, BlockInfo>;
  meta: PageMetaType;
  breadcrumbs?: LinkInfo[];
  showCoverSource?: boolean;
  showReadingTime?: boolean;
  showPublishEditDates?: boolean;
  showTableOfContents?: boolean;
}

const {
  page,
  blockMap,
  meta,
  breadcrumbs,
  showCoverSource,
  showReadingTime,
  showPublishEditDates,
  showTableOfContents,
} = Astro.props;

const giveStickersProperty = getPagePropertyByName(
  page,
  "Page View Stickers",
  "select",
);
const specialSticker = giveStickersProperty
  ? (giveStickersProperty.select?.name as StickerTypes | "none" | undefined)
  : "none";
const shouldGiveStickers = specialSticker !== "none";

const skipLinks: SkipLinksProps["links"] = [
  { name: "Content", url: "#content" },
];
if (showTableOfContents) {
  skipLinks.unshift({ name: "Table of Contents", url: "#table-of-contents" });
}
---

<PageWithHeaderLayout
  id={page.id}
  meta={meta}
  breadcrumbs={breadcrumbs}
  stickers={{
    enabled: true,
    unlockOnScroll: shouldGiveStickers,
    special: shouldGiveStickers ? specialSticker : undefined,
  }}
>
  <SkipLinks links={skipLinks} slot="skip-links" />

  <NotionPageHeader
    page={page}
    blockMap={blockMap}
    slot="page-header"
    showCoverSource={showCoverSource}
    showReadingTime={showReadingTime}
    showPublishEditDates={showPublishEditDates}
  />
  <NotionBackdrop
    class="notion-page-backdrop"
    page={page}
    slot="page-backdrop"
    widths={[360, 1280, 1920]}
    noIntrinsicWidth
    sizes="100vw"
    shader={{ enabled: true }}
  />

  <DevOnly>
    <div id="DEV-notion-page-id" style={{ display: "none" }}>{page.id}</div>
  </DevOnly>

  <article class="content flow" id="content">
    <slot />
  </article>

  {
    showTableOfContents && (
      <aside class="flow sidebar-box" slot="site-sidebar">
        <NotionTableOfContents page={page} blockMap={blockMap} />
      </aside>
    )
  }

  <slot name="page-footer" slot="page-footer" />

  {
    shouldGiveStickers && (
      <LazyLoader
        type="sticker-page-view-unlock"
        props={{ pageId: page.id, specialStickerType: specialSticker }}
        client:idle
      />
    )
  }
</PageWithHeaderLayout>

<style>
  .content {
    border: var(--big-box-border-width) solid var(--big-box-color);
    padding: var(--big-box-spacing-small);
  }

  @media (min-width: 600px) {
    .content {
      padding: var(--big-box-spacing-small) var(--big-box-spacing);
    }
  }
</style>
