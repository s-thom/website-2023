---
import { type DatabaseObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { BLOG_PAGE_ID } from "../../../lib/constants";
import { getFilteredBlogItems } from "../../../lib/notion/blog";
import { getPage } from "../../../lib/notion/caches";
import { getPagePropertyByName } from "../../../lib/notion/util";
import LocalImage from "../../Images/LocalImage.astro";
import { LazyLoader } from "../../react/LazyLoader.tsx";
import NotionProperty from "../properties/NotionProperty.astro";
import BlogListPageItem from "./BlogListPageItem.astro";

export interface Props {
  page: DatabaseObjectResponse;
}

const { page } = Astro.props;

const blogHomePage = await getPage(BLOG_PAGE_ID);
const allBlogPages = await getFilteredBlogItems({
  allowUnpublished: import.meta.env.DEV,
  allowUnlisted: false,
});

// Get next/previous entries
let next: DatabaseObjectResponse | undefined;
let prev: DatabaseObjectResponse | undefined;
const index = allBlogPages.findIndex((curr) => curr.id === page.id);
if (index !== -1) {
  if (index !== 0) {
    next = allBlogPages[index - 1];
  }
  if (index !== allBlogPages.length - 1) {
    prev = allBlogPages[index + 1];
  }
}

const publishedDateProperty = getPagePropertyByName(page, "Published", "date");
const editedDateProperty = getPagePropertyByName(page, "Edited", "date");
const tagsProperty = getPagePropertyByName(page, "Tags", "multi_select");
---

<div class="blog-footer flow">
  <div class="properties-box">
    <div class="dates-list">
      {
        publishedDateProperty && publishedDateProperty.date !== null && (
          <div>
            Published: <NotionProperty property={publishedDateProperty} />
          </div>
        )
      }
      {
        editedDateProperty && editedDateProperty.date !== null && (
          <div>
            Edited: <NotionProperty property={editedDateProperty} />
          </div>
        )
      }
    </div>

    {
      tagsProperty && (
        <div>
          <NotionProperty property={tagsProperty} />
        </div>
      )
    }
    <div class="author">
      <LocalImage
        id="profile2023"
        resourcePath="profile-2023.jpg"
        class="profile-photo"
        alt="Stuart Thomson"
        widths={[24]}
        sizes="24px"
        loading="lazy"
      /> Written by <a href="/">Stuart Thomson</a>
    </div>
  </div>

  <div class="links-box">
    <div class="next">
      {
        next ? (
          <BlogListPageItem page={next} showTitle>
            <Fragment slot="info-top">
              <span>&nbsp;</span>
              <span class="pre-title">Next post</span>
            </Fragment>
          </BlogListPageItem>
        ) : (
          <LazyLoader
            type="sticker-blog-nav-unlock"
            props={{ stickerType: "glowing-star" }}
            client:idle
          />
        )
      }
    </div>
    <div class="prev">
      {
        prev ? (
          <BlogListPageItem page={prev} showTitle>
            <Fragment slot="info-top">
              <span>&nbsp;</span>
              <span class="pre-title">Previous post</span>
            </Fragment>
          </BlogListPageItem>
        ) : (
          <LazyLoader
            type="sticker-blog-nav-unlock"
            props={{ stickerType: "chequered-flag" }}
            client:idle
          />
        )
      }
    </div>
    <div class="up">
      <BlogListPageItem page={blogHomePage as any} showTitle>
        <Fragment slot="info-top">
          <span>&nbsp;</span>
          <span class="pre-title">More posts</span>
        </Fragment>
      </BlogListPageItem>
    </div>
  </div>
</div>
