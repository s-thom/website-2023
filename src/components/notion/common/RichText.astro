---
import type { RichTextItemResponse } from "@notionhq/client/build/src/api-endpoints";
import { getCollection } from "astro:content";
import {
  getPageFullPathFromInfo,
  normalizeTitle,
  richTextToUnformattedString,
  toProperUuid,
} from "../../../lib/notion/util";

export interface Props {
  components: RichTextItemResponse[];
}

const { components } = Astro.props;

const pageEntries = await getCollection("pages");

const componentsWithResolvedLinks = await Promise.all(
  // eslint-disable-next-line @typescript-eslint/require-await
  components.map<Promise<RichTextItemResponse>>(async (component) => {
    if (component.type !== "text") {
      return component;
    }
    if (!component.text.link) {
      return component;
    }

    // Links to other pages/blocks in Notion are always of the form `/<pageid>[?v=<id>&<other params>][#<blockid>]`, where
    // the IDs are lower case without hyphens
    let url: URL;
    try {
      let base = component.text.link.url.startsWith("/")
        ? "https://www.notion.so"
        : undefined;
      url = new URL(component.text.link.url, base);
    } catch (err) {
      return component;
    }

    if (url.hostname !== "www.notion.so") {
      return component;
    }

    const pathMatch = url.pathname.match(/^\/([0-9a-f]{32})$/);
    if (!pathMatch) {
      return component;
    }

    // We have a UUID-like URL it seems, so let's grab the page and the block (if there's a fragment)
    const pageId = pathMatch[1];
    const blockId = url.hash.replace(/^#/, "");

    const pageIdUuid = toProperUuid(pageId);
    const page = pageEntries.find((entry) => entry.id === pageIdUuid);
    if (!page) {
      throw new Error(`Unable to resolve internal link to page ${pageIdUuid}`);
    }

    let hash = "";
    if (blockId) {
      const blockIdUuid = toProperUuid(blockId);
      const block = page.data.blockMap[blockIdUuid];
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      if (!block || block.block.object === "page") {
        throw new Error(
          `Unable to resolve internal link to block ${blockIdUuid} in page ${pageIdUuid}`,
        );
      }
      let title: string | undefined;
      switch (block.block.type) {
        case "heading_1":
          title = richTextToUnformattedString(block.block.heading_1.rich_text);
          break;
        case "heading_2":
          title = richTextToUnformattedString(block.block.heading_2.rich_text);
          break;
        case "heading_3":
          title = richTextToUnformattedString(block.block.heading_3.rich_text);
          break;
        default:
      }

      if (title) {
        hash = normalizeTitle(title);
      }
    }

    const pagePath = getPageFullPathFromInfo(page.data);
    const href = `${pagePath}${hash ? `#${hash}` : ""}`;

    return {
      ...component,
      text: {
        ...component.text,
        link: {
          url: href,
        },
      },
    };
  }),
);

function isLinkExternal(url: string): boolean {
  return new URL(url, Astro.site).hostname !== new URL(Astro.site!).hostname;
}
---

{
  componentsWithResolvedLinks.map((component) => {
    const classes: string[] = [];

    if (component.annotations.bold) {
      classes.push("text-bold");
    }
    if (component.annotations.italic) {
      classes.push("text-italic");
    }
    if (component.annotations.strikethrough) {
      classes.push("text-strikethrough");
    }
    if (component.annotations.underline) {
      classes.push("text-underline");
    }
    if (component.annotations.code) {
      classes.push("text-code");
    }
    if (
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      component.annotations.color &&
      component.annotations.color !== "default"
    ) {
      classes.push(`text-color-${component.annotations.color}`);
    }

    switch (component.type) {
      case "text":
        if (component.text.link) {
          return (
            <a
              href={component.text.link.url}
              class:list={classes}
              rel={
                isLinkExternal(component.text.link.url) ? "external" : undefined
              }
            >
              {component.text.content}
            </a>
          );
        }
        return <span class:list={classes}>{component.text.content}</span>;
      case "mention":
        // TODO: Different types of mention
        return <span class:list={classes}>{component.plain_text}</span>;
      case "equation":
        // TODO: Render maths
        return (
          <span class:list={classes}>{component.equation.expression}</span>
        );
      default:
        return (
          <span class:list={classes}>
            {(component as RichTextItemResponse).plain_text}
          </span>
        );
    }
  })
}
