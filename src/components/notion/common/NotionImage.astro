---
import type { DatabaseObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { Picture } from "astro:assets";
import sharp from "sharp";
import { IMAGE_OPTIMISATION_ALLOWED_DOMAINS } from "../../../lib/constants";
import DevOnly from "../../DevOnly.astro";
import ExternalImage from "../../ExternalImage/ExternalImage.astro";

const USE_ASTRO_IMAGE = false;

export interface Props {
  id: string;
  image: NonNullable<DatabaseObjectResponse["cover"]>;
  alt: string;
  class?: string;
  sizes?: string;
  loading?: "eager" | "lazy";
}

const {
  id,
  class: className,
  alt,
  image,
  sizes,
  loading,
  ...rest
} = Astro.props;

const GENERATE_IMAGE_WIDTHS = [1920, 720, 360];

let url: string | undefined;
switch (image.type) {
  case "external":
    url = image.external.url;
    break;
  case "file":
    url = image.file.url;
    break;
  default:
    url = undefined;
}

let useAstroImage = false;
const dimensions = { width: 0, height: 0 };
if (USE_ASTRO_IMAGE && url !== undefined) {
  const parsedUrl = new URL(url);
  if (IMAGE_OPTIMISATION_ALLOWED_DOMAINS.includes(parsedUrl.hostname)) {
    useAstroImage = true;

    // Need to fetch intrinsic dimensions because Astro doesn't download images before it downloads images?
    const response = await fetch(url);
    const buffer = await response.arrayBuffer();
    const sharpInstance = sharp(buffer);
    const meta = await sharpInstance.metadata();
    dimensions.width = meta.width ?? 0;
    dimensions.height = meta.height ?? 0;
  }
}
---

{
  useAstroImage && (
    <Picture
      src={url! as any}
      alt={alt}
      formats={["avif", "webp"]}
      loading={loading}
      id={id}
      width={dimensions.width}
      height={dimensions.height}
    />
  )
}

{
  !useAstroImage && url && (
    <ExternalImage
      {...rest}
      id={id}
      src={url}
      alt={alt}
      widths={GENERATE_IMAGE_WIDTHS}
      sizes={sizes}
      class={className}
    />
  )
}

{
  !url && (
    <DevOnly>
      image {id} has image type {image.type}
    </DevOnly>
  )
}
