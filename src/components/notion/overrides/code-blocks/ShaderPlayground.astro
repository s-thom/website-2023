---
import type { CodeBlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import type { TextureOptions } from "twgl.js";
import Tabs from "../../../site/Tabs.astro";
import CodeRenderer from "../../../site/CodeRenderer.astro";
import DEFAULT_FRAGMENT from "../../../../lib/shaders/backdrop.frag";
import DEFAULT_VERTEX from "../../../../lib/shaders/backdrop.vert";

export interface Props {
  block: CodeBlockObjectResponse;
  content: string;
}

const { block, content } = Astro.props;

function parseSections(input: string): Record<string, string> {
  const sections = input.split(/---\s*/).filter(Boolean);
  const result: Record<string, string> = {};

  for (let i = 0; i < sections.length; i += 2) {
    const key = sections[i].trim();
    const value = sections[i + 1]?.trim() ?? "";
    result[key] = value;
  }

  return result;
}

const sections = parseSections(content);

let textureOptions: TextureOptions[] | undefined;
if (sections.textures) {
  textureOptions = sections.textures
    .split(/\r?\n/)
    .map((url) => ({ src: url.trim() }));
}
---

<div class="shader-playground" data-block={block.id}>
  <Tabs id={`tabs-${block.id}`}>
    <span slot="tab1">Shader</span>
    <div slot="panel1" class="preview-area">
      <canvas
        id={`canvas-${block.id}`}
        class="shader-playground-canvas"
        data-vertex={sections.vertex ?? DEFAULT_VERTEX}
        data-fragment={sections.fragment ?? DEFAULT_FRAGMENT}
        data-textures={textureOptions && JSON.stringify(textureOptions)}
        data-options={sections.options}></canvas>
    </div>

    <span slot="tab2">Code</span>
    <div slot="panel2" class="code-area flow">
      {
        sections.vertex && (
          <Fragment>
            <h3 class="code-title">Vertex shader</h3>
            <CodeRenderer code={sections.vertex} language="glsl" />
          </Fragment>
        )
      }
      {
        sections.fragment && (
          <Fragment>
            <h3 class="code-title">Fragment shader</h3>
            <CodeRenderer code={sections.fragment} language="glsl" />
          </Fragment>
        )
      }
    </div>
  </Tabs>
</div>

<style>
  .shader-playground-canvas {
    width: 100%;
    height: 100%;
    aspect-ratio: 16 / 9;
  }

  .code-title {
    font-size: var(--size-step-point5);
  }

  .preview-area {
    position: relative;

    & > :global(.tp-rotv) {
      position: absolute;
      z-index: 1;
      inset-block-start: var(--spacing-half);
      inset-inline-end: var(--spacing-half);
    }
  }
</style>

<script>
  import { Pane } from "tweakpane";
  import type { TextureOptions } from "twgl.js";
  import { tweakpaneCSS } from "../../../../css/misc/tweakpane";
  import { h } from "../../../../lib/h";
  import { getShaderOverride } from "../../../../lib/shaders/overrides/overrides";
  import { setupShader } from "../../../../lib/shaders/setup";
  import {
    addOptionsToPanel,
    type SlidersOptionsMap,
  } from "../../../../lib/shaders/sliders";

  document.body.appendChild(h("style", {}, tweakpaneCSS));

  document
    .querySelectorAll<HTMLDivElement>(".shader-playground")
    .forEach((playground) => {
      const canvas = playground.querySelector<HTMLCanvasElement>("canvas");
      if (!canvas) {
        console.error(
          `Shader area ${playground.dataset.block} does not have canvas`,
        );
        return;
      }

      const override = getShaderOverride(playground.dataset.block ?? "");

      let options: SlidersOptionsMap = {};
      if (canvas.dataset.options ?? override.uniforms) {
        const container =
          playground.querySelector<HTMLDivElement>(".preview-area")!;

        options =
          override.uniforms ??
          (JSON.parse(canvas.dataset.options!) as unknown as SlidersOptionsMap);

        // Add fullscreen option
        let isFullscreen = false;
        container.addEventListener("fullscreenchange", () => {
          isFullscreen = document.fullscreenElement === container;
        });
        options.btnFullscreen = {
          type: "button",
          label: "Toggle fullscreen",
          onClick: () => {
            if (isFullscreen) {
              document.exitFullscreen();
            } else {
              container.requestFullscreen();
            }
          },
          value: undefined,
        };

        const pane = new Pane({ container, title: "Options" });
        addOptionsToPanel(pane, options);
      }

      let textures: TextureOptions[] | undefined;
      if (canvas.dataset.textures) {
        textures = JSON.parse(canvas.dataset.textures);
      }
      textures = override.textures ?? textures;

      const uniforms: Record<string, unknown> = {};
      const { start } = setupShader({
        canvas,
        shaders: {
          vertex: override.vertex ?? canvas.dataset.vertex!,
          fragment: override.fragment ?? canvas.dataset.fragment!,
        },
        uniforms,
        onFrame: () => {
          for (const [key, option] of Object.entries(options)) {
            uniforms[key] = option.value;
          }
        },
        textures,
        onTexturesReady: () => {
          start();
        },
      });

      if (!textures) {
        start();
      }
    });
</script>
