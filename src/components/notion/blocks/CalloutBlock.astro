---
import type { CalloutBlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { getNotionImageInfo } from "../../../lib/notion/image";
import DevOnly from "../../DevOnly.astro";
import Picture from "../../Images/Picture.astro";
import { DEFAULT_IMAGE_DENSITIES } from "../../Images/constants";
import RichText from "../common/RichText.astro";

export interface Props {
  block: CalloutBlockObjectResponse;
}

const { block } = Astro.props;

const imageInfo =
  block.callout.icon && block.callout.icon.type !== "emoji"
    ? await getNotionImageInfo(
        `${block.id}_icon`,
        [32],
        DEFAULT_IMAGE_DENSITIES,
      )
    : undefined;
---

<div
  class={`small-box block-callout block-callout-${block.callout.color}`}
  data-block={block.id}
>
  {
    block.callout.icon && (
      <>
        {
          // eslint-disable-next-line no-nested-ternary
          imageInfo ? (
            <Picture
              imageInfo={imageInfo}
              alt=""
              sizes={[32]}
              linkToOriginal
              sizes="32px"
              loading="lazy"
            />
          ) : block.callout.icon.type === "emoji" ? (
            <span class:list={["block-callout-icon", "emoji-icon"]}>
              {block.callout.icon.emoji}
            </span>
          ) : (
            <DevOnly>
              callout block {block.id} has unsupported image type{" "}
              {block.callout.icon.type}
            </DevOnly>
          )
        }
      </>
    )
  }
  <div class="flow block-callout-content">
    <p>
      <RichText components={block.callout.rich_text} />
    </p>
    <slot />
  </div>
</div>

<style>
  .block-callout {
    display: grid;
    gap: var(--spacing-half);
    padding: var(--spacing);
    border: 1.5px solid var(--color-border);
    border-radius: var(--border-radius);
    margin-inline: calc(var(--spacing) * -1);
  }

  @media (min-width: 600px) {
    .block-callout {
      grid-template-columns:
        [icon] 28px
        [content] 1fr;
      margin-inline: 0;
    }
  }

  .block-callout-icon {
    grid-column: icon;
    font-size: 1em;
    width: 1.5em;
    height: 1.5em;
    margin: 0 auto;
  }

  .block-callout-content {
    grid-column: content;
    overflow-x: auto;
  }

  .block-callout-default,
  .block-callout-default_background {
    border-color: var(--color-notion-default);
    background-color: var(--color-notion-default-background);
  }
  .block-callout-gray,
  .block-callout-gray_background {
    border-color: var(--color-notion-gray);
    background-color: var(--color-notion-gray-background);
  }
  .block-callout-brown,
  .block-callout-brown_background {
    border-color: var(--color-notion-brown);
    background-color: var(--color-notion-brown-background);
  }
  .block-callout-orange,
  .block-callout-orange_background {
    border-color: var(--color-notion-orange);
    background-color: var(--color-notion-orange-background);
  }
  .block-callout-yellow,
  .block-callout-yellow_background {
    border-color: var(--color-notion-yellow);
    background-color: var(--color-notion-yellow-background);
  }
  .block-callout-green,
  .block-callout-green_background {
    border-color: var(--color-notion-green);
    background-color: var(--color-notion-green-background);
  }
  .block-callout-blue,
  .block-callout-blue_background {
    border-color: var(--color-notion-blue);
    background-color: var(--color-notion-blue-background);
  }
  .block-callout-purple,
  .block-callout-purple_background {
    border-color: var(--color-notion-purple);
    background-color: var(--color-notion-purple-background);
  }
  .block-callout-pink,
  .block-callout-pink_background {
    border-color: var(--color-notion-pink);
    background-color: var(--color-notion-pink-background);
  }
  .block-callout-red,
  .block-callout-red_background {
    border-color: var(--color-notion-red);
    background-color: var(--color-notion-red-background);
  }
</style>
