---
import type { BlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import NotionBlock from "./NotionBlock.astro";
import NotionBlockGroup from "./NotionBlockGroup.astro";
import {
  BLOCK_GROUP_TYPE,
  type BaseBlockComponentProps,
  type BlockGroup,
} from "./types";
import BulletedListItemGroup from "./BulletedListItemGroup.astro";
import NumberedListItemGroup from "./NumberedListItemGroup.astro";
import TodoGroup from "./TodoGroup.astro";

export interface Props extends Omit<BaseBlockComponentProps, "block"> {
  blocks: BlockObjectResponse[];
}

const { blocks, blockMap } = Astro.props;

// There's a bit of an annoying problem with some elements, like lists, where
// they need to be inside a wrapping element. This is especially important for
// numbered lists to have the correct numbers.
// As such, this component deals with "block groups", which are essentially
// consecutive blocks of the same type. This extra work only needs to be done
// for certain block types, though.
const items: (BlockObjectResponse | BlockGroup)[] = [];
let currentGroup: BlockGroup | undefined;

for (const block of blocks) {
  if (currentGroup) {
    // Add to existing group if types are the same
    if (currentGroup.blockType === block.type) {
      currentGroup.items.push(block);
      continue;
    }

    // Append new group when the type differs
    items.push(currentGroup);
    currentGroup = undefined;
  }

  // Possibly create new group when
  switch (block.type) {
    case "bulleted_list_item":
      currentGroup = {
        type: BLOCK_GROUP_TYPE,
        blockType: block.type,
        wrapper: BulletedListItemGroup,
        items: [block],
      };
      break;
    case "numbered_list_item":
      currentGroup = {
        type: BLOCK_GROUP_TYPE,
        blockType: block.type,
        wrapper: NumberedListItemGroup,
        items: [block],
      };
      break;
    case "to_do":
      currentGroup = {
        type: BLOCK_GROUP_TYPE,
        blockType: block.type,
        wrapper: TodoGroup,
        items: [block],
      };
      break;
    default:
      items.push(block);
  }
}
// Pick up any stragglers
if (currentGroup) {
  items.push(currentGroup);
  currentGroup = undefined;
}
---

{
  items.map((blockOrGroup) => {
    if (blockOrGroup.type === BLOCK_GROUP_TYPE) {
      return <NotionBlockGroup group={blockOrGroup} blockMap={blockMap} />;
    }
    return <NotionBlock block={blockOrGroup} blockMap={blockMap} />;
  })
}
