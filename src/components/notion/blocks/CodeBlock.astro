---
import type { CodeBlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import {
  transformerNotationDiff,
  transformerNotationErrorLevel,
  transformerNotationFocus,
  transformerNotationHighlight,
  transformerNotationWordHighlight,
  transformerRemoveNotationEscape,
  transformerRenderWhitespace,
} from "@shikijs/transformers";
import { Code } from "astro:components";
import { getCodeBlockContentInfo } from "../../../lib/shiki";
import { syntaxTheme } from "../../../lib/shiki/theme";

const loadAboutLinks = () =>
  import("../overrides/code-blocks/AboutLinks.astro").then((b) => b.default);
const loadStickerBook = () =>
  import("../overrides/code-blocks/StickerBook.astro").then((b) => b.default);
const loadStickerBookFeatureToggle = () =>
  import("../overrides/code-blocks/StickerBookFeatureToggle.astro").then(
    (b) => b.default,
  );
const loadStickerBookFreeStickersUnlock = () =>
  import("../overrides/code-blocks/StickerBookFreeStickersUnlock.astro").then(
    (b) => b.default,
  );
const loadStickerBookRarityList = () =>
  import("../overrides/code-blocks/StickerBookRarityList.astro").then(
    (b) => b.default,
  );
const loadStickerBookUniqueUnlock = () =>
  import("../overrides/code-blocks/StickerBookUniqueUnlock.astro").then(
    (b) => b.default,
  );
const loadStickerUnlock = () =>
  import("../overrides/code-blocks/StickerUnlock.astro").then((b) => b.default);
const loadRawHTML = () =>
  import("../overrides/code-blocks/RawHTML.astro").then((b) => b.default);
const loadDefaultBlock = () =>
  import("./DefaultBlock.astro").then((b) => b.default);

export interface Props {
  block: CodeBlockObjectResponse;
}

const { block } = Astro.props;

const info = getCodeBlockContentInfo(block);

let Component: any;
if (info.type === "override") {
  switch (info.component) {
    case "AboutLinks":
      Component = await loadAboutLinks();
      break;
    case "StickerBook":
      Component = await loadStickerBook();
      break;
    case "StickerBookFeatureToggle":
      Component = await loadStickerBookFeatureToggle();
      break;
    case "StickerBookFreeStickersUnlock":
      Component = await loadStickerBookFreeStickersUnlock();
      break;
    case "StickerBookRarityList":
      Component = await loadStickerBookRarityList();
      break;
    case "StickerBookUniqueUnlock":
      Component = await loadStickerBookUniqueUnlock();
      break;
    case "StickerUnlock":
      Component = await loadStickerUnlock();
      break;
    case "RawHTML":
      Component = await loadRawHTML();
      break;
    default:
      Component = await loadDefaultBlock();
  }
}
---

{
  info.type === "override" && (
    <Component block={block} content={info.content} {...info.props} />
  )
}

{
  info.type === "code" && (
    <div class="block-code" data-block={block.id}>
      <Code
        class="code-block"
        code={info.code}
        lang={info.language}
        theme={syntaxTheme}
        transformers={[
          transformerNotationDiff(),
          transformerNotationHighlight(),
          transformerNotationWordHighlight(),
          transformerNotationFocus(),
          transformerNotationErrorLevel(),
          transformerRenderWhitespace(),
          transformerRemoveNotationEscape(),
        ]}
        tabindex={undefined}
      />
    </div>
  )
}

<style>
  .block-code {
    display: flex;
    font-size: 0.9em;
  }

  .code-block {
    display: block;
    flex-grow: 1;
    padding: var(--spacing);
    border-radius: var(--border-radius);
    overflow-x: auto;
    color-scheme: dark;

    &:global(.has-diff) :global(.line.remove) {
      margin: 0 calc(var(--spacing) * -1);
      background-color: #ff000033;
    }

    &:global(.has-diff) :global(.line.add) {
      margin: 0 calc(var(--spacing) * -1);
      background-color: #9ccc2c33;
    }

    &:global(.has-highlighted) :global(.line.highlighted) {
      margin: 0 calc(var(--spacing) * -1);
      background-color: #80cbc420;
    }

    &:global(.has-highlighted) :global(.line.highlighted.error) {
      margin: 0 calc(var(--spacing) * -1);
      background-color: #e454541b;
    }

    &:global(.has-highlighted) :global(.line.highlighted.warning) {
      margin: 0 calc(var(--spacing) * -1);
      background-color: #ff942f1b;
    }

    /* :global(.tab),
    :global(.space) {
      position: relative;
      opacity: 0;

      &::before {
        position: absolute;
      }

      &::selection {
        opacity: 0.3;
      }
    }

    :global(.tab)::before {
      content: "⇥";
    }

    :global(.space)::before {
      content: "·";
    } */
  }
</style>
