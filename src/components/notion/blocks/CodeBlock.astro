---
import type { CodeBlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { highlightCode } from "../../../lib/shiki";
import DefaultBlock from "./DefaultBlock.astro";
import StickerBook from "../overrides/code-blocks/StickerBook.astro";
import StickerBookFeatureToggle from "../overrides/code-blocks/StickerBookFeatureToggle.astro";
import StickerBookFreeStickersUnlock from "../overrides/code-blocks/StickerBookFreeStickersUnlock.astro";
import StickerBookRarityList from "../overrides/code-blocks/StickerBookRarityList.astro";
import StickerBookUniqueUnlock from "../overrides/code-blocks/StickerBookUniqueUnlock.astro";

export interface Props {
  block: CodeBlockObjectResponse;
}

const { block } = Astro.props;

const result = await highlightCode(block);

let Component: any;
if (result.type === "override") {
  switch (result.component) {
    case "StickerBook":
      Component = StickerBook;
      break;
    case "StickerBookFeatureToggle":
      Component = StickerBookFeatureToggle;
      break;
    case "StickerBookFreeStickersUnlock":
      Component = StickerBookFreeStickersUnlock;
      break;
    case "StickerBookRarityList":
      Component = StickerBookRarityList;
      break;
    case "StickerBookUniqueUnlock":
      Component = StickerBookUniqueUnlock;
      break;
    default:
      Component = DefaultBlock;
  }
}
---

{result.type === "override" && <Component block={block} />}

{
  result.type === "html" && (
    <code data-block={block.id} class="block-code" set:html={result.html} />
  )
}

<style>
  .block-code {
    display: block;
  }

  .block-code > :global(pre) {
    padding: var(--spacing);
    border-radius: var(--border-radius);
    overflow-x: auto;
    color-scheme: dark;
  }

  .block-code :global(.language-id) {
    /* TODO: Figure out what to do with the language indicator */
    display: none;
  }
</style>
