---
import type { CodeBlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { richTextToUnformattedString } from "../../../lib/notion/util";
import { getCodeBlockContentInfo } from "../../../lib/shiki";
import CodeRenderer from "../../site/CodeRenderer.astro";
import StickerBookFeatureToggle from "../../stickers/StickerBookFeatureToggle.astro";
import StickerBookFreeStickersUnlock from "../../stickers/StickerBookFreeStickersUnlock.astro";
import StickerBookRarityList from "../../stickers/StickerBookRarityList.astro";
import StickerBookUniqueUnlock from "../../stickers/StickerBookUniqueUnlock.astro";
import StickerUnlock from "../../stickers/StickerUnlock.astro";
import BlogCollection from "../overrides/blog/BlogCollection.astro";
import AboutLinks from "../overrides/code-blocks/AboutLinks.astro";
import RawHTML from "../overrides/code-blocks/RawHTML.astro";
import ShaderPlayground from "../overrides/code-blocks/ShaderPlayground.astro";
import StickerBook from "../overrides/code-blocks/StickerBook.astro";
import Trunic from "../overrides/code-blocks/Trunic.astro";
import ProjectsCollection from "../overrides/projects/ProjectsCollection.astro";
import DefaultBlock from "./DefaultBlock.astro";

export interface Props {
  block: CodeBlockObjectResponse;
}

const { block } = Astro.props;

const blockContent = richTextToUnformattedString(block.code.rich_text);
const blockLanguage = block.code.language;
const info = getCodeBlockContentInfo(blockContent, blockLanguage);

if (info.type === "none") {
  // eslint-disable-next-line no-console
  console.warn(
    `Unable to determine language and/or content of code block ${block.id}`,
  );
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
let Component: any;
if (info.type === "override") {
  switch (info.component) {
    case "AboutLinks":
      Component = AboutLinks;
      break;
    case "BlogCollection":
      Component = BlogCollection;
      break;
    case "ProjectsCollection":
      Component = ProjectsCollection;
      break;
    case "StickerBook":
      Component = StickerBook;
      break;
    case "ShaderPlayground":
      Component = ShaderPlayground;
      break;
    case "StickerBookFeatureToggle":
      Component = StickerBookFeatureToggle;
      break;
    case "StickerBookFreeStickersUnlock":
      Component = StickerBookFreeStickersUnlock;
      break;
    case "StickerBookRarityList":
      Component = StickerBookRarityList;
      break;
    case "StickerBookUniqueUnlock":
      Component = StickerBookUniqueUnlock;
      break;
    case "StickerUnlock":
      Component = StickerUnlock;
      break;
    case "Trunic":
      Component = Trunic;
      break;
    case "RawHTML":
      Component = RawHTML;
      break;
    default:
      Component = DefaultBlock;
  }
}
---

{
  info.type === "override" && (
    <Component block={block} content={info.content} {...info.props} />
  )
}

{
  info.type === "code" && (
    <div class="block-code" data-block={block.id}>
      <CodeRenderer
        code={info.code}
        language={info.language}
        meta={info.meta}
      />
    </div>
  )
}

<style>
  .block-code {
    display: flex;
  }
</style>
