---
import type { CodeBlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { highlightCode } from "../../../lib/shiki";

const loadAboutLinks = () =>
  import("../overrides/code-blocks/AboutLinks.astro").then((b) => b.default);
const loadStickerBook = () =>
  import("../overrides/code-blocks/StickerBook.astro").then((b) => b.default);
const loadStickerBookFeatureToggle = () =>
  import("../overrides/code-blocks/StickerBookFeatureToggle.astro").then(
    (b) => b.default,
  );
const loadStickerBookFreeStickersUnlock = () =>
  import("../overrides/code-blocks/StickerBookFreeStickersUnlock.astro").then(
    (b) => b.default,
  );
const loadStickerBookRarityList = () =>
  import("../overrides/code-blocks/StickerBookRarityList.astro").then(
    (b) => b.default,
  );
const loadStickerBookUniqueUnlock = () =>
  import("../overrides/code-blocks/StickerBookUniqueUnlock.astro").then(
    (b) => b.default,
  );
const loadDefaultBlock = () =>
  import("./DefaultBlock.astro").then((b) => b.default);

export interface Props {
  block: CodeBlockObjectResponse;
}

const { block } = Astro.props;

const result = await highlightCode(block);

let Component: any;
if (result.type === "override") {
  switch (result.component) {
    case "AboutLinks":
      Component = await loadAboutLinks();
      break;
    case "StickerBook":
      Component = await loadStickerBook();
      break;
    case "StickerBookFeatureToggle":
      Component = await loadStickerBookFeatureToggle();
      break;
    case "StickerBookFreeStickersUnlock":
      Component = await loadStickerBookFreeStickersUnlock();
      break;
    case "StickerBookRarityList":
      Component = await loadStickerBookRarityList();
      break;
    case "StickerBookUniqueUnlock":
      Component = await loadStickerBookUniqueUnlock();
      break;
    default:
      Component = await loadDefaultBlock();
  }
}
---

{result.type === "override" && <Component block={block} />}

{
  result.type === "html" && (
    <code data-block={block.id} class="block-code" set:html={result.html} />
  )
}
