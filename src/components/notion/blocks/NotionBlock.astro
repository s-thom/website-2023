---
import type { BlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import { getBlockChildren } from "../../../integrations/notion-loader/util";
import NotionRenderer from "./NotionRenderer.astro";
import type { BaseBlockComponentProps } from "./types";

const loadBulletedListItemBlock = () =>
  import("./BulletedListItemBlock.astro").then((b) => b.default);
const loadCalloutBlock = () =>
  import("./CalloutBlock.astro").then((b) => b.default);
const loadCodeBlock = () => import("./CodeBlock.astro").then((b) => b.default);
const loadColumn = () => import("./Column.astro").then((b) => b.default);
const loadColumnList = () =>
  import("./ColumnList.astro").then((b) => b.default);
const loadDefaultBlock = () =>
  import("./DefaultBlock.astro").then((b) => b.default);
const loadDividerBlock = () =>
  import("./DividerBlock.astro").then((b) => b.default);
const loadHeading1Block = () =>
  import("./Heading1Block.astro").then((b) => b.default);
const loadHeading2Block = () =>
  import("./Heading2Block.astro").then((b) => b.default);
const loadHeading3Block = () =>
  import("./Heading3Block.astro").then((b) => b.default);
const loadImageBlock = () =>
  import("./ImageBlock.astro").then((b) => b.default);
const loadNumberedListItemBlock = () =>
  import("./NumberedListItemBlock.astro").then((b) => b.default);
const loadParagraphBlock = () =>
  import("./ParagraphBlock.astro").then((b) => b.default);
const loadQuoteBlock = () =>
  import("./QuoteBlock.astro").then((b) => b.default);
const loadTableBlock = () =>
  import("./TableBlock.astro").then((b) => b.default);
const loadTableRowBlock = () =>
  import("./TableRowBlock.astro").then((b) => b.default);
const loadTodoBlock = () => import("./TodoBlock.astro").then((b) => b.default);
const loadToggleBlock = () =>
  import("./ToggleBlock.astro").then((b) => b.default);

export interface Props extends BaseBlockComponentProps {
  block: BlockObjectResponse;
}

const { block, blockMap } = Astro.props;

const children = block.has_children
  ? getBlockChildren(block.id, blockMap)
  : undefined;

let Component: any;
switch (block.type) {
  case "paragraph":
    Component = await loadParagraphBlock();
    break;
  case "heading_1":
    Component = await loadHeading1Block();
    break;
  case "heading_2":
    Component = await loadHeading2Block();
    break;
  case "heading_3":
    Component = await loadHeading3Block();
    break;
  case "callout":
    Component = await loadCalloutBlock();
    break;
  case "code":
    Component = await loadCodeBlock();
    break;
  case "toggle":
    Component = await loadToggleBlock();
    break;
  case "bulleted_list_item":
    Component = await loadBulletedListItemBlock();
    break;
  case "numbered_list_item":
    Component = await loadNumberedListItemBlock();
    break;
  case "image":
    Component = await loadImageBlock();
    break;
  case "quote":
    Component = await loadQuoteBlock();
    break;
  case "divider":
    Component = await loadDividerBlock();
    break;
  case "column_list":
    Component = await loadColumnList();
    break;
  case "column":
    Component = await loadColumn();
    break;
  case "to_do":
    Component = await loadTodoBlock();
    break;
  case "table":
    Component = await loadTableBlock();
    break;
  case "table_row":
    Component = await loadTableRowBlock();
    break;
  case "template":
  case "synced_block":
  case "child_page":
  case "child_database":
  case "equation":
  case "breadcrumb":
  case "table_of_contents":
  case "link_to_page":
  case "embed":
  case "bookmark":
  case "video":
  case "pdf":
  case "file":
  case "audio":
  case "link_preview":
  case "unsupported":
  default:
    Component = await loadDefaultBlock();
}
---

<Component block={block} blockMap={blockMap}>
  {
    children ? (
      <NotionRenderer blocks={children} blockMap={blockMap} />
    ) : undefined
  }
</Component>
