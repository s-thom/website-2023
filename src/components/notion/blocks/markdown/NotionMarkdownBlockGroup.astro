---
import type { BlockObjectResponse } from "@notionhq/client/build/src/api-endpoints";
import NotionMarkdownBlock from "./NotionMarkdownBlock.astro";
import type { BaseBlockComponentProps } from "../types";

export interface Props extends Omit<BaseBlockComponentProps, "block"> {
  group: BlockGroup;
}

export const BLOCK_GROUP_TYPE = "_block-group";

export interface BlockGroup {
  type: typeof BLOCK_GROUP_TYPE;
  blockType: BlockObjectResponse["type"];
  wrapper: (_props: any) => any;
  items: BlockObjectResponse[];
}

// This needs to be its own component to get around a quirk of the
// Astro compiler. Simply put, the component function of a dynamic
// component (e.g. WrapperComponent below) must be in the frontmatter
// area of the file and not assigned in the template section.

const { group, blockMap } = Astro.props;

const WrapperComponent = group.wrapper;
---

<WrapperComponent>
  {
    group.items.map((block) => (
      <NotionMarkdownBlock block={block} blockMap={blockMap} />
    ))
  }
</WrapperComponent>
