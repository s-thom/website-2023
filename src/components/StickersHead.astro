---
import type { StickerTypes } from "../stickers/stickers";

export interface PageStickerData {
  pageId: string;
  enabled: boolean;
  unlockOnScroll?: boolean;
  special?: StickerTypes;
}

export interface Props extends PageStickerData {}

const { pageId, enabled, unlockOnScroll = true, special } = Astro.props;
---

<script
  is:inline
  id="sticker-data"
  type="application/json"
  set:html={JSON.stringify({ pageId, enabled, unlockOnScroll, special })}
/>
<script>
  import { v4 as uuid } from "uuid";
  import { getOptionValue, subscribeToOption } from "../lib/options";
  import {
    type AddStickerEventData,
    STICKER_TYPES_BY_RARITY,
    STICKER_TYPE_MAP,
    type StickerInfo,
    type StickerTypes,
    addSticker,
    animate,
    canAddSticker,
    getStickerStore,
    preloadStickerData,
  } from "../stickers/stickers";
  import { arrayRandom, range } from "../util";
  import type { PageStickerData } from "./StickersHead.astro";

  const MIN_STICKER_UNLOCKS_ON_PAGE = 1;
  const MAX_STICKER_UNLOCKS_ON_PAGE = 5;

  interface ScrollThresholdData {
    progress: number;
    shouldGiveCommon: boolean;
    shouldGiveUncommon: boolean;
  }

  export class StickerUnlockHandler {
    private readonly pageId: string;

    private readonly special: StickerTypes | undefined;

    private readonly unlockOnScroll: boolean;

    private thresholds: ScrollThresholdData[] = [];

    private highestScrollProgress = 0;

    constructor(
      pageId: string,
      unlockOnScroll: boolean,
      special: StickerTypes | undefined,
    ) {
      this.pageId = pageId;
      this.special = special;
      this.unlockOnScroll = unlockOnScroll;
    }

    private giveSticker(type: StickerTypes, pageId?: string) {
      const newSticker: StickerInfo = {
        id: uuid(),
        type,
        unlockTime: Date.now(),
        unlockPageId: pageId ?? this.pageId,
        zone: undefined,
        position: { type: "none" },
      };

      addSticker(newSticker);
    }

    private onScroll() {
      const { stickers: currentStickers } = getStickerStore();

      if (this.special !== undefined) {
        if (
          !currentStickers.find(
            (sticker) =>
              sticker.type === this.special &&
              sticker.unlockPageId === this.pageId,
          )
        ) {
          // Must have scrolled some amount.
          // This does lead to an edge case where a large enough viewport means that nothing is given. but that's fine.
          // This system isn't exactly fair, but it also doesn't matter at all.
          if (document.documentElement.scrollTop > 0) {
            this.giveSticker(this.special);
          }
        }
      }

      const viewportHeight = window.innerHeight;
      // The amount that can be scrolled
      const pageHeight = document.documentElement.scrollHeight - viewportHeight;

      const progress = document.documentElement.scrollTop / pageHeight;
      if (progress <= this.highestScrollProgress) {
        // Regular stickers for this level have already been given out, so we can stop here.
        return;
      }

      const matchedThresholds = this.thresholds.filter(
        (threshold) =>
          threshold.progress > this.highestScrollProgress &&
          threshold.progress < progress,
      );

      if (matchedThresholds.length > 0) {
        const types: StickerTypes[] = [];
        matchedThresholds.forEach((threshold) => {
          if (threshold.shouldGiveCommon) {
            const stickerType = arrayRandom(STICKER_TYPES_BY_RARITY.common);
            types.push(stickerType);
          }
          if (threshold.shouldGiveUncommon) {
            const stickerType = arrayRandom(STICKER_TYPES_BY_RARITY.uncommon);
            types.push(stickerType);
          }
        });

        Promise.all(types.map((type) => preloadStickerData(type))).then(() => {
          for (const type of types) {
            animate({ type: "add", sticker: type });
            this.giveSticker(type);
          }
        });
      }

      this.highestScrollProgress = progress;
    }

    private onResize() {
      // Calculate thresholds for which stickers should be given out
      const viewportHeight = window.innerHeight;
      // The amount that can be scrolled
      const pageHeight = document.documentElement.scrollHeight - viewportHeight;

      // If there's not much to scroll, only give one sticker for the page
      const numViewports = pageHeight / viewportHeight;
      const numStickersToGive = Math.max(
        Math.min(Math.ceil(numViewports), MAX_STICKER_UNLOCKS_ON_PAGE),
        MIN_STICKER_UNLOCKS_ON_PAGE,
      );
      const allThresholds = range(numStickersToGive).map<ScrollThresholdData>(
        (i) => ({
          progress: (i + 1) / (numStickersToGive + 1),
          shouldGiveCommon: true,
          shouldGiveUncommon: false,
        }),
      );

      const { stickers: currentStickers } = getStickerStore();
      if (
        !currentStickers.find(
          (sticker) =>
            sticker.unlockPageId === this.pageId &&
            STICKER_TYPE_MAP[sticker.type].rarity === "uncommon",
        )
      ) {
        const unmetThresholds = allThresholds.filter(
          (threshold) => threshold.progress > this.highestScrollProgress,
        );
        if (unmetThresholds.length === 0) {
          // eslint-disable-next-line no-console
          console.log(
            "All thresholds have been met, but uncommon sticker has not been given. Giving now",
          );
          this.giveSticker(arrayRandom(STICKER_TYPES_BY_RARITY.uncommon));
        } else {
          arrayRandom(unmetThresholds).shouldGiveUncommon = true;
        }
      }

      this.thresholds = allThresholds;

      // Trigger onScroll just in case any stickers need to be given out based on the resize.
      this.onScroll();
    }

    private onAddStickerEvent(event: CustomEvent<AddStickerEventData>) {
      this.giveSticker(event.detail.type, event.detail.pageId);
    }

    start() {
      const onResize = this.onResize.bind(this);
      const onScroll = this.onScroll.bind(this);
      const onAddStickerEvent = this.onAddStickerEvent.bind(this);

      const subscribe = () => {
        if (this.unlockOnScroll) {
          window.addEventListener("resize", onResize);
          window.addEventListener("scrollend", onScroll);
        }
        window.addEventListener("addsticker", onAddStickerEvent);

        const now = new Date();
        if (
          now.getDate() === 4 &&
          now.getMonth() === 2 &&
          canAddSticker("birthday-cake")
        ) {
          this.giveSticker("birthday-cake");
        }

        onResize();
      };

      const unsubscribe = () => {
        if (this.unlockOnScroll) {
          window.removeEventListener("resize", onResize);
          window.removeEventListener("scrollend", onScroll);
        }
        window.removeEventListener("addsticker", onAddStickerEvent);
      };

      const initialEnabled = getOptionValue("stickers") === "on";
      if (initialEnabled) {
        subscribe();
      }
      subscribeToOption("stickers", (value) => {
        if (value === "on") {
          subscribe();
        } else {
          unsubscribe();
        }
      });
    }
  }

  function start() {
    const stickerDataEl = document.getElementById("sticker-data");
    if (!stickerDataEl) {
      return;
    }
    const data: PageStickerData = JSON.parse(stickerDataEl.textContent ?? "");
    if (!data.enabled) {
      return;
    }

    new StickerUnlockHandler(
      data.pageId,
      data.unlockOnScroll ?? false,
      data.special,
    ).start();
  }
  start();
</script>
