---
export interface Props {}
---

<div class="settings-content flow">
  <h2>Preferences</h2>
  <div>
    <h3>Theme</h3>
    <p>Change how the website looks.</p>
    <div class="input-container">
      <input type="radio" name="theme" id="theme-light" value="light" />
      <label for="theme-light">Light</label>
      <input type="radio" name="theme" id="theme-dark" value="dark" />
      <label for="theme-dark">Dark</label>
      <input type="radio" name="theme" id="theme-auto" value="auto" />
      <label for="theme-auto">System default</label>
    </div>
  </div>
  <div>
    <h3>Motion</h3>
    <p>Enable or disable animated effects.</p>
    <div class="input-container">
      <input type="radio" name="motion" id="motion-reduced" value="reduced" />
      <label for="motion-reduced">Reduced motion</label>
      <input
        type="radio"
        name="motion"
        id="motion-no-preference"
        value="no-preference"
      />
      <label for="motion-no-preference">Force motion</label>
      <input type="radio" name="motion" id="motion-auto" value="auto" />
      <label for="motion-auto">System default</label>
    </div>
  </div>

  <style>
    .settings-content {
      margin: var(--spacing);
    }

    .input-container {
      display: flex;
      gap: var(--spacing);

      input {
        display: none;
      }

      label {
        flex-grow: 1;
        border: var(--big-box-border-width) solid var(--big-box-color);
        color: var(--big-box-color);
        text-align: center;
        padding: var(--spacing-half);
      }
      input:checked + label {
        background-color: var(--big-box-color);
        color: var(--color-text-header-negative);
      }
    }
  </style>

  <script>
    import {
      getOptionValueWithAuto,
      setOptionValue,
      subscribeToOption,
    } from "../../lib/options";
    import type { Options } from "../../lib/options/index.ts";

    const options: (keyof Options)[] = ["theme", "motion"];

    function selectOption(
      panel: HTMLElement,
      key: keyof Options,
      value: string,
    ) {
      panel
        .querySelectorAll<HTMLInputElement>(`input[name="${key}"]`)
        .forEach((input) => {
          input.checked = input.value === value;
        });
    }

    document
      .querySelectorAll<HTMLDivElement>(".settings-content")
      .forEach((panel) => {
        for (const key of options) {
          subscribeToOption(key, (_, value) => selectOption(panel, key, value));
          const value = getOptionValueWithAuto(key);
          selectOption(panel, key, value);
          document.documentElement.dataset[key] = value;
        }

        panel.querySelectorAll("input").forEach((input) => {
          input.addEventListener("change", () => {
            setOptionValue(input.name as any, input.value as any);
            document.documentElement.dataset[input.name] = input.value;
          });
        });
      });
  </script>
</div>
