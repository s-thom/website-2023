---
import { getImageInfo, type ImageSourceData } from "./image";

export interface ImageRequiredProps {
  alt: string;
  widths: number[];
  sizes: string;
  loading: "eager" | "lazy";
  class?: string;
}

export interface Props extends ImageRequiredProps {
  id: string;
  getImage: () => Promise<ImageSourceData>;
}

const {
  id,
  getImage,
  alt,
  class: className,
  widths,
  sizes,
  loading,
  ...rest
} = Astro.props;

const imageInfo = await getImageInfo(id, getImage, widths ?? []);
const formats = imageInfo.formats.slice();
---

<picture {...rest}>
  {
    formats.map((format) => {
      const srcset = format.sizes
        .slice()
        .sort((a, z) => a.width - z.width)
        .map((size) => `${size.path} ${size.width}w`)
        .join(", ");

      return <source srcset={srcset} sizes={sizes} type={format.mimeType} />;
    })
  }
  <img
    class={className}
    src={imageInfo.original.path}
    alt={alt}
    loading={loading}
  />
</picture>
